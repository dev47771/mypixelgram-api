def app
pipeline {
    agent any
    environment {
        ENV_TYPE = "production"
        PORT = 4028
        DATABASE_URL = "postgresql://neondb_owner:npg_FXg0w9EPTpGb@ep-patient-mouse-agr6mzwv-pooler.c-2.eu-central-1.aws.neon.tech/mypixel-db?sslmode=require&channel_binding=require"
        NAMESPACE = "mypixelgram-ru"
        REGISTRY_HOSTNAME = "daarrys"
        PROJECT = "mypixelgram-main-api"
        SERVICE="main"
        REGISTRY = "registry.hub.docker.com"
        DEPLOYMENT_NAME = "mypixelgram-main-api-deployment"
        IMAGE_NAME = "${env.BUILD_ID}_${env.ENV_TYPE}_${env.GIT_COMMIT}"
        DOCKER_BUILD_NAME = "${env.REGISTRY_HOSTNAME}/${env.PROJECT}:${env.IMAGE_NAME}"
    }

    stages {
        stage('Clone repository') {
            steps {
                checkout scm
            }
        }
        stage('Install dependencies') {
            steps {
                script {
                    sh '''
                        export NVM_DIR="$HOME/.nvm"
                        [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
                        nvm use --lts
                        yarn install --frozen-lockfile
                    '''
                }
            }
        }

       stage('Apply database migrations') {
           steps {
               script {
                   sh '''
                       export NVM_DIR="$HOME/.nvm"
                       [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
                       nvm use --lts

                       # Проверяем статус миграций
                       if ! yarn run main:prisma:status --schema=./apps/main/prisma/schema.prisma | grep -q "No pending migrations."; then
                           echo "Database schema is not empty. Baseline required."

                           # Создаём директорию для baseline
                           mkdir -p prisma/migrations/0_init

                           # Генерируем SQL для baseline
                           npx prisma migrate diff \
                             --from-empty \
                             --to-schema-datamodel ./apps/main/prisma/schema.prisma \
                             --script > prisma/migrations/0_init/migration.sql

                           # Отмечаем baseline как применённый
                           npx prisma migrate resolve --schema=./apps/main/prisma/schema.prisma --applied 0_init

                           echo "Baseline applied successfully."
                       else
                           echo "No baseline needed. Proceeding with deploy."
                       fi

                       # Теперь можно безопасно применить миграции
                       yarn run main:prisma:deploy
                   '''
               }
           }
       }

        stage('Unit tests') {
            steps {
                script {
                    sh '''
                       export NVM_DIR="$HOME/.nvm"
                       [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
                       nvm use --lts
                       yarn install
                       yarn test
                    '''
                }
            }
        }
        stage('e2e tests') {
            steps {
                script {
                    sh '''
                       export NVM_DIR="$HOME/.nvm"
                       [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
                       nvm use --lts
                       yarn test:e2e
                    '''
                }
            }
        }
        stage('Build docker image') {
            steps {
                echo "Build image started..."
                    script {
                       app = docker.build("${env.DOCKER_BUILD_NAME}", "--build-arg service=${env.SERVICE} --build-arg port=${env.PORT} -f ./apps/${env.SERVICE}/Dockerfile ./")
                    }
                echo "Build image finished..."
            }
        }
        stage('Push docker image') {
             steps {
                 echo "Push image started..."
                     script {
                        docker.withRegistry("https://${env.REGISTRY}", 'mypixelgram-ru') {
                            app.push("${env.IMAGE_NAME}")
                        }
                     }
                 echo "Push image finished..."
             }
       }
       stage('Delete image local') {
             steps {
                 script {
                    sh "docker rmi -f ${env.DOCKER_BUILD_NAME}"
                 }
             }
        }
        stage('Preparing deployment') {
             steps {
                 echo "Preparing started..."
                     sh 'ls -ltr'
                     sh 'pwd'
                     sh "chmod +x ./apps/${env.SERVICE}/preparingDeploy.sh"
                     sh "./apps/${env.SERVICE}/preparingDeploy.sh ${env.REGISTRY_HOSTNAME} ${env.PROJECT} ${env.IMAGE_NAME} ${env.DEPLOYMENT_NAME} ${env.PORT} ${env.NAMESPACE}"
                     sh "cat ./apps/${env.SERVICE}/deployment.yaml"
             }
        }
        stage('Deploy to Kubernetes') {
             steps {
                 withKubeConfig([credentialsId: 'prod-kubernetes']) {
                    sh "kubectl apply -f ./apps/${env.SERVICE}/deployment.yaml"
                    sh "kubectl rollout status deployment/${env.DEPLOYMENT_NAME} --namespace=${env.NAMESPACE}"
                    sh "kubectl get services -o wide"
                 }
             }
        }
    }
}
